
set(IMGUI_APP_SOURCE_DIR ${CMAKE_SOURCE_DIR}/..)
set(IMGUI_APP_INCLUDE_DIR ${IMGUI_APP_SOURCE_DIR})

# Standalone application starter kit
add_library(imgui_app STATIC)
target_include_directories(imgui_app PUBLIC ${IMGUI_APP_INCLUDE_DIR})

# Platform options
set(IMGUI_APP_PLATFORM "SDL2" CACHE STRING "Platform Binding")
string(TOUPPER ${IMGUI_APP_PLATFORM} IMGUI_APP_PLATFORM)

set(IMGUI_APP_PLATFORM_SDL2 OFF)
set(IMGUI_APP_PLATFORM_GLFW OFF)

if(IMGUI_APP_PLATFORM STREQUAL "SDL2")
  set(IMGUI_APP_PLATFORM_SDL2 ON)
  set(IMGUI_IMPL_PLATFORM_SDL2 ON)
elseif(IMGUI_APP_PLATFORM STREQUAL "GLFW")
  set(IMGUI_APP_PLATFORM_GLFW ON)
  set(IMGUI_IMPL_PLATFORM_GLFW ON)
endif()

# Platform Bindings
include(cmake/imgui_impl_platform.cmake)
target_link_libraries(imgui_app ${IMGUI_IMPL_PLATFORM_LIBRARIES})

# Renderer options
set(IMGUI_APP_RENDERER "OpenGL3" CACHE STRING "Renderer Binding")
string(TOUPPER ${IMGUI_APP_RENDERER} IMGUI_APP_RENDERER)

set(IMGUI_APP_RENDERER_OPENGL OFF)
set(IMGUI_APP_RENDERER_OPENGL2 OFF)
set(IMGUI_APP_RENDERER_OPENGL3 OFF)
set(IMGUI_APP_RENDERER_VULKAN OFF)

if(IMGUI_APP_RENDERER STREQUAL "OPENGL2")
  set(IMGUI_APP_RENDERER_OPENGL ON)
  set(IMGUI_APP_RENDERER_OPENGL2 ON)
  set(IMGUI_IMPL_RENDERER_OPENGL2 ON)
elseif(IMGUI_APP_RENDERER STREQUAL "OPENGL3")
  set(IMGUI_APP_RENDERER_OPENGL ON)
  set(IMGUI_APP_RENDERER_OPENGL3 ON)
  set(IMGUI_IMPL_RENDERER_OPENGL3 ON)
elseif(IMGUI_APP_RENDERER STREQUAL "VULKAN")
  set(IMGUI_APP_RENDERER_VULKAN ON)
  set(IMGUI_IMPL_RENDERER_VULKAN ON)

  # Custom Vulkan Renderer Binding
  set(IMGUI_IMPL_RENDERER_CUSTOM_DEFINE IMGUI_APP_IMPL_VULKAN_USER_TEXTURE_PATCH)
  set(IMGUI_IMPL_RENDERER_VULKAN_CUSTOM_SOURCE ${IMGUI_APP_SOURCE_DIR}/imgui_app_impl_vulkan.cpp)
endif()

# OpenGL Loader options
set(IMGUI_APP_OPENGL_LOADER "GLEW" CACHE STRING "OpenGL Loader")
string(TOUPPER ${IMGUI_APP_OPENGL_LOADER} IMGUI_APP_OPENGL_LOADER)

set(IMGUI_APP_OPENGL_LOADER_GLEW OFF)
set(IMGUI_APP_OPENGL_LOADER_GL3W OFF)
set(IMGUI_APP_OPENGL_LOADER_GLAD OFF)
set(IMGUI_APP_OPENGL_LOADER_GLBINDING2 OFF)
set(IMGUI_APP_OPENGL_LOADER_GLBINDING3 OFF)

if(NOT IMGUI_APP_RENDERER_OPENGL3)
  # unnecessary
elseif(IMGUI_APP_OPENGL_LOADER STREQUAL "GLEW")
  set(IMGUI_APP_OPENGL_LOADER_GLEW ON)
  set(IMGUI_IMPL_OPENGL_LOADER_GLEW ON)
elseif(IMGUI_APP_OPENGL_LOADER STREQUAL "GL3W")
  set(IMGUI_APP_OPENGL_LOADER_GL3W ON)
  set(IMGUI_IMPL_OPENGL_LOADER_GL3W ON)
elseif(IMGUI_APP_OPENGL_LOADER STREQUAL "GLAD")
  set(IMGUI_APP_OPENGL_LOADER_GLAD ON)
  set(IMGUI_IMPL_OPENGL_LOADER_GLAD ON)
elseif(IMGUI_APP_OPENGL_LOADER STREQUAL "GLBINDING2")
  set(IMGUI_APP_OPENGL_LOADER_GLBINDING2 ON)
  set(IMGUI_IMPL_OPENGL_LOADER_GLBINDING2 ON)
elseif(IMGUI_APP_OPENGL_LOADER STREQUAL "GLBINDING3")
  set(IMGUI_APP_OPENGL_LOADER_GLBINDING3 ON)
  set(IMGUI_IMPL_OPENGL_LOADER_GLBINDING3 ON)
endif()

# Renderer Bindings
include(cmake/imgui_impl_renderer.cmake)
target_link_libraries(imgui_app ${IMGUI_IMPL_RENDERER_LIBRARIES})

# Sources
target_sources(imgui_app PRIVATE
  ${IMGUI_APP_SOURCE_DIR}/imgui_app.cpp
)

# Platform
if(IMGUI_APP_PLATFORM_SDL2) # SDL2
  target_compile_definitions(imgui_app PUBLIC IMGUI_APP_PLATFORM_SDL2)
  target_sources(imgui_app PRIVATE ${IMGUI_APP_SOURCE_DIR}/imgui_app_platform_sdl.cpp)

elseif(IMGUI_APP_PLATFORM_GLFW) # GLFW
  target_compile_definitions(imgui_app PUBLIC IMGUI_APP_PLATFORM_GLFW)
  target_sources(imgui_app PRIVATE ${IMGUI_APP_SOURCE_DIR}/imgui_app_platform_glfw.cpp)
endif()

# Renderer
if(IMGUI_APP_RENDERER_OPENGL) # OpenGL
  target_compile_definitions(imgui_app PUBLIC IMGUI_APP_RENDERER_OPENGL)
  target_sources(imgui_app PRIVATE ${IMGUI_APP_SOURCE_DIR}/imgui_app_opengl_loader.cpp)

  if(IMGUI_APP_RENDERER_OPENGL3) # OpenGL 3
    target_compile_definitions(imgui_app PUBLIC IMGUI_APP_RENDERER_OPENGL3)
    target_sources(imgui_app PRIVATE ${IMGUI_APP_SOURCE_DIR}/imgui_app_renderer_opengl3.cpp)

  elseif(IMGUI_APP_RENDERER_OPENGL2) # OpenGL 2
    target_compile_definitions(imgui_app PUBLIC IMGUI_APP_RENDERER_OPENGL2)
    target_sources(imgui_app PRIVATE ${IMGUI_APP_SOURCE_DIR}/imgui_app_renderer_opengl2.cpp)
  endif()

elseif(IMGUI_APP_RENDERER_VULKAN) # Vulkan
  target_compile_definitions(imgui_app PUBLIC IMGUI_APP_RENDERER_VULKAN)
  target_sources(imgui_app PRIVATE ${IMGUI_APP_SOURCE_DIR}/imgui_app_renderer_vulkan.cpp)
endif()

set(IMGUI_APP_LIBRARIES imgui_app)
